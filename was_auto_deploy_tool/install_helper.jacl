$AdminControl trace com.ibm.*=all=enabled;

set scriptPath "/appl/wsp/autodeploy_spc/scripts";
source $scriptPath/log_helper.jacl;

#Get the list of installed versions to uninstall for the given module
proc getInstalledAppModule {shortModuleName} {
	global AdminApp
	java::import java.util.List
	set installedApps {};
	if {[catch {set appsCurInstalled [$AdminApp list]} exception] != 0} {
		errorLog "AdminApp List command failed with the exception : $exception";
	}
	foreach installedApplication $appsCurInstalled {
		if {[regexp -nocase "${shortModuleName}" ${installedApplication} match]} {
			lappend installedApps $installedApplication;
		}
	}
	return $installedApps;
}

#Uninstal module method
proc uninstallModule {uninstallAppModule} {
	global AdminConfig;
	global AdminApp;
	set uninsAppName [string trim $uninstallAppModule];
	#debugLog "Uninstalling the module $uninsAppName";
	if {[catch {$AdminApp uninstall $uninsAppName} exception] != 0} {
		errorLog "Uninstallation failed for the module with exception : $exception"
	}
	debugLog "Saving uninstallation changes"
	if {[catch {$AdminConfig save} exception] != 0} {
		errorLog "Save failed after Uninstall with exception : $exception"
	}
}

#Install module method
proc installAppModule {earLoc parameters} {
	global AdminApp;
	global AdminConfig;
	
	debugLog "Installation of the module is starting with parameters : $parameters";
	if {[catch {$AdminApp install $earLoc $parameters} exception] != 0} {
		errorLog "Install failed for the module with exception : $exception"
	}
	debugLog "Saving the installation changes";
	if {[catch {$AdminConfig save} exception] != 0} {
		errorLog "Save failed after Install with exception : $exception"
	}
}

#Validating whether the module is uninstalled or not
proc isModuleUninstalled {appName} {
	set uninstallStatus [isAppModuleExists $appName];
	set isUninstalled true;
	if {$uninstallStatus} {
		set isUninstalled false;
	}
	return $isUninstalled;
}

#Validating whether the module is installed or not
proc isModuleInstalled {appName} {
	set isInstalled [isAppModuleExists $appName];
	return $isInstalled;
}

#Check whether the module is available in dmgr
proc isAppModuleExists {appName} {
	global AdminApp;
	set isExists false;
	
	if {[catch {set appsCurInstalled [$AdminApp list]} exception] != 0} {
		errorLog "AdminApp List command failed with the exception : $exception";
	}
	foreach installedApplication $appsCurInstalled {
		if {[regexp -nocase ${installedApplication} ${appName} match]} {
			set isExists true;
			break;
		}
	}
	return $isExists;
}

#Synchronise the nodes for that env. Gets the list from DMGR using AdminTask and synchronises only the managed nodes
proc synchNode {} {
	global AdminConfig;
	global AdminTask;
	global AdminControl;
	
	if {[catch {set  nodelist [$AdminTask listManagedNodes]} exception] != 0} {
		errorLog "AdminTask list managed nodes failed with exception = $exception";
	}
	foreach node $nodelist {
		if {[catch {set Sync1 [$AdminControl completeObjectName type=NodeSync,node=$node,*]} exception] != 0} {
			errorLog "AdminControl get object name failed with exception = $exception";
		}
		if {[catch {$AdminControl invoke $Sync1 sync} exception] != 0} {
			errorLog "Synchronisation failed with exception = $exception";
		} else {
			debugLog "Synchronisation completed succesfully for the node '$node'";
		}
	}
}

#Configures the starting weight for the module
proc configureStartingWeight {moduleName startWeight} {
	global AdminConfig;
	
	debugLog "Configuring the Starting Weight for the module $moduleName";
	if {[catch {set dep [$AdminConfig getid /Deployment:$moduleName/]} exception] != 0} {
		errorLog "AdminConfig getId failed with exception : $exception";
	}
	if {[catch {set depObject [$AdminConfig showAttribute $dep deployedObject]} exception] != 0} {
		errorLog "AdminConfig showAttribute failed with exception : $exception";
	}
	set attributeValuePair [list [list startingWeight $startWeight]];
	if {[catch {$AdminConfig modify $depObject $attributeValuePair} exception] != 0} {
		errorLog "Starting weight config failed with exception : $exception";
	}
	if {[catch {$AdminConfig save} exception] != 0} {
		errorLog "Save failed after Starting Weight Config with exception : $exception"
	}
	debugLog "Starting weight configured for the module $moduleName";
}

#Maps the webservers to the Web Modules available in the installed module
proc mapToWebServers {moduleName mapModule} {
	global AdminConfig;
	global AdminApp;
		
	debugLog "Mapping the web modules to the webservers $mapModule";
	if {[catch {$AdminApp edit $moduleName ${mapModule}} exception] != 0} {
		errorLog "WebServer mapping failed with exception : $exception";
	}
	if {[catch {$AdminConfig save} exception] != 0} {
		errorLog "Save failed after Web Server mapping with exception : $exception"
	}
	debugLog "WebServer mapping completed";
}

#Checks whether a WAR file is available in the given application
proc getAppsToWebMap {moduleName} {
	global AdminApp;
	
	if {[catch {set appModules [$AdminApp listModules $moduleName]} exception] != 0} {
		errorLog "Listing the modules of $moduleName failed with exception : $exception";
	}
	set isWebModulePresent false
	
	foreach module $appModules {
	#puts $module
		if {[regexp ".war" ${module} match]} {
			#puts "Web Modules present in this Application and it requires web server map."
			#puts "${module}"
			set isWebModulePresent true
		}
	}
	return $isWebModulePresent
}

#Finds the cell name and returns the name
proc getCellName {} {
	global AdminControl;
	if {[catch {set cellName [$AdminControl getCell]} exception] != 0} {
		errorLog "Finding cellName failed with exception : $exception";
	}
	return $cellName;
}

#Creates the list of webservers to map
proc getWebServerMapping {cellName map} {
	global AdminConfig;
	
	if {[catch {set webservers [$AdminConfig list WebServer]} exception] != 0} {
		errorLog "Listing webserver failed with exception : $exception";
	}
	foreach webserver $webservers {
		if {[catch {set webservername [$AdminConfig showAttribute $webserver server]} exception] != 0} {
			errorLog "Getting Attribute of webserver $webserver failed with exception : $exception";
		}
		set name [split $webservername "("];
		set ihsServer [lindex $name 0];
		set holder1 [string first "/nodes/" $webservername]
		set holder2 [string first "/servers/" $webservername]
		set webservernode [string range $webservername [expr $holder1+7] [expr $holder2-1]];
		set mapping "$map+WebSphere:cell=$cellName,node=$webservernode,server=$ihsServer";
		set map $mapping;
		#debugLog "WebServer mapping is : $map";
	}
	return $map;
}

#Maps the given roles to the given uid or groups - webservice security
proc mapRoles {moduleName role everyOne allAuth uid group} {
	global AdminApp;
	global AdminConfig;
	debugLog "Mapping the role $role to uid $uid and group $group for module $moduleName";
	set mapping "{$role $everyOne $allAuth $uid $group}";
	set map "-MapRolesToUsers { $mapping }";
	if {[catch {$AdminApp edit $moduleName ${map}} exception] != 0} {
		errorLog "WebService security role mapping failed with exception : $exception";
	}
	if {[catch {$AdminConfig save} exception] != 0} {
		errorLog "Save failed after Web Server mapping with exception : $exception"
	}
	debugLog "WebService security role mapping completed";
}
